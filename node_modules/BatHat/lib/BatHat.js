var BatUtil = require('BatUtil');
var mongodb = require('mongodb');

var BatHat = function(express)
{
	this.e = express || this.createExpressApp();

	this.ModelBase = require('ModelBase');
	this.models = {};

	this.mongoServer = null;
	this.mongoName = "coolDatabase";
	this.mongoServerConfig =
	{
		'auto_reconnect': true,
		'poolSize': 5
	};
}

BatHat.prototype =
{
	// -------------------------------------------------------------------------
	// Called by the constructor
	// It requires and instantiate a new express application.
	// -------------------------------------------------------------------------
	createExpressApp: function()
	{
		var express = require('express');
		return express();
	},

	// -------------------------------------------------------------------------
	// Since BatHat deals with MongoDB, the listen function actually sets up
	// the connection with the database before the HTTP server.
	//
	// The HTTP requests share the same connection pool, instead of creating
	// a new connection for each request.
	// -------------------------------------------------------------------------
	listen: function(port)
	{
		this.mongoServer = new mongodb.Server("localhost", 27017,
			this.mongoServerConfig);

		var mongoManager = new mongodb.Db(this.mongoName, this.mongoServer);

		var root = this;
		mongoManager.open(function(err, db)
		{
			root.models.users.all(db);
			db.close();
		});

		console.log("Listening on http://127.0.0.1:" + port + "/");
	},

	// -------------------------------------------------------------------------
	// Takes a model and generates RESTful routes for this model, following the
	// pattern:
	//
	// -------------------------------------------------------------------------
	// GET  /items 				"index" 	=> Return all items.
	// GET  /items/1 			"show" 		=> Returns a specific item.
	// POST /items				"create"	=> Create new item and returns it.
	// POST /items/1/update 	"update"	=> Update an item and returns it.
	// GET  /items/1/destroy 	"destroy"	=> Deletes an item.
	// -------------------------------------------------------------------------
	//
	// The 'options' parameter may specify the routes that will be created.
	// For example:
	// -------------------------------------------------------------------------
	// { index: true, show: true, create: false, update: false, destroy: true }
	// -------------------------------------------------------------------------
	RESTful: function(model, options)
	{
		options = options || {};
		var modelName = BatUtil.getObjectName(this.models, model);
		var modelPath = "/" + modelName;

		if (options["index"] === undefined || options["index"] === true)
		{
			this.e.get(modelPath, function(req, res)
			{
				res.json(model.all());
			});
		}
		if (options["show"] === undefined || options["show"] === true)
		{
			this.e.get(modelPath + "/:id", function(req, res)
			{
				res.json(model.find());
			});
		}
		if (options["create"] === undefined || options["create"] === true)
		{
			
		}
		if (options["update"] === undefined || options["update"] === true)
		{
			
		}
		if (options["destroy"] === undefined || options["destroy"] === true)
		{
			
		}
	}
};

// -----------------------------------------------------------------------------
// Usage:
// var Frant = new Frant(my_express_app);
module.exports = BatHat;