var _ = require('underscore');
var FieldBase = require('FieldBase');

// -----------------------------------------------------------------------------
// When you define a model, Frank takes care of setting up the MongoDB
// Collection.
// 
// It also provides a nice 'ORM' to your models, so you don't need to type
// MongoDB queries all the time.
// -----------------------------------------------------------------------------
var ModelBase = function(options)
{
	this.fields = {};
	this.scopes = {};
	this.db = null;
	this.name = null;
	this.FieldBase = require('FieldBase');

	if(options['timestamps'])
	{
		this.fields['created_at'] =
		{
			'type': 'datetime',
			'default': Date.now()
		};

		this.fields['updated_at'] = 
		{
			'type': 'datetime',
			'default': Date.now()
		};
	}

	if(options['paranoia'])
	{
		this.fields['deleted_at'] = 
		{
			'type': 'datetime',
			'default': Date.now()
		};
	}

	_.extend(this.fields, options.fields);
	_.extend(this, options.scopes);
}

ModelBase.prototype = 
{
	// -------------------------------------------------------------------------
	// It takes the model as you setup to work with the database,
	// and converts it to a fully functional Backbone Model. 
	// 
	// Returns a String that you need to send to the client browser
	// -------------------------------------------------------------------------
	toBackbone: function()
	{
	},

	// -------------------------------------------------------------------------
	// Querying interface
	// -------------------------------------------------------------------------
	first: function()
	{
	},

	last: function()
	{
	},

	all: function(callback)
	{
		if(this.db === null) return;
		var root = this;
		this.db.collection(this.name, function(err, collection)
		{
			collection.find().toArray(function(err, items)
			{
				var size = items.length;
				var tmpItems = [];
				for(var i = 0; i < size; i++)
				{
					tmpItems[i] = new root.FieldBase
					(
						root.db, 
						root.name, 
						items[i]
					);
				}
				callback(err, tmpItems);
			});
		});
	},

	find: function(id)
	{
	}

	// -------------------------------------------------------------------------
	// Easy validation
	// -------------------------------------------------------------------------
}


// -----------------------------------------------------------------------------
// Usage:
// var User = Frant.ModelBase.extend({options});
module.exports = 
{
	extend: function(options)
	{
		return new ModelBase(options);
	}
}